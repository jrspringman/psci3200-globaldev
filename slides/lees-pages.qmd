---
title: "Github Pages"
author: "Jeremy Springman"
institute: "University of Pennsylvania"

format:
  pptx:
    toc: false
    theme: [custom_iea.scss]
    width: 1050
    margin: 0.1
    logo: DevLab_Logo_29Mar2023.png
    footer: "jrspringman.github.io/psci3200-globaldev/"
    embed-resources: true
    template-partials:
    - title-slide.html
    gfm:
    mermaid-format: png
    code-line-numbers: false


highlight-style: github

bibliography: img/references.bib
---

# Git and Github

## Resources

To learn more about using git with R, visit [happygitwithr.com](happygitwithr.com)

:::{.notes}
This tutorial draws heavily on the website happygitwithr.com
To learn more about using git with R, please visit the website, which covers introductory materials in greater details and guides new users through more advanced topics.
:::

## Git Basics

**Git is a version control program**, so you can avoid...

```{.default}
analysis.R
analysis_v1.R
analysis_v2.R
analysis_v2_FINAL.R
```

\

**Version control**

- Helps avoid devastating loss/failure
- Tracks changes and allows users to view or restore older versions
- Can be private or public

:::{.notes}
Fundamentally, git is about "version control"
- Data analysis tasks are often long-term efforts
- They usually require input from multiple people
- You must be able to go back and replicate results or tweak methods
Version control creates a detailed, permanent record of this process
- This helps to avoid devastating loss/failure
- Tracks changes and allows users to easily view (or restore) older versions
- Repos can be kept private or made public, allowing users to easily share their data and code publicly
:::

## Git Basics

**Each project is a repository (repo)

- Data and code for projects are stored in a repo folder
- Repo is hosted *remotely* on github.com and *locally* as a folder on your harddrive
- Make changes locally, record them as a *commit*, *push* them to the remote version 
- *pull* changes made by others from the remote version down to your local copy

:::{.notes}
Git revolves around folders called repositories (or repos)
- Data and code for individual projects are stored in a dedicated repo
- The repo is hosted remotely on github.com
- Repos exist on your harddrive as a normal folder (usually within a larger folder that includes all active git repositories you are working on)
- Users make changes locally, record them as a "commit", which is a record of any changes you have made, and "push" them to the remote version 
- Users can "pull" changes made by others from the remote version down to their local copy
:::

## Git Basics

**Usage**

- Edit files using your preferred software (RStudio, Excel, text editors, etc.)
- When you're done, record the changes as a *commit*, push them to the remote version

**Collaboration**

- Precise record of who makes changes
- Simultaneous editing can cause challenges

:::{.notes}
Git works mostly in the background
- Before you start working, pull any changes that exist on the remote version but not on your local copy
- Create/add/edit/delete files as you normally would if you were not using git
- For example, you can edit files containing code by using RStudio or VSCode, or create or edit a spreadsheet using Excel
- Once you've accomplished a task or want to walk away for the day, record the changes you've made (which we'll cover below) and then push your changes to the remote version
Collaboration 
- Git is great for collaboration because it keeps precise track of who has made changes
- However, simultaneous editing of the *same file* can cause challenges, and beginners should avoid doing so
:::

## Git Basics

**Essential commands**

- `git pull origin main`
- `git add .`
- `git commit -m "describe your changes or vent frustration"`
- `git push origin main`

:::{.notes}
Beginners only need to know a few commands; in this tutorial, we'll use a software client that implements these commands for us using easy point-and-click software
- Main refers to the man version of the repository (advanced users might create multiple versions, or branches, of a repo, but we don't need to worry about that here)
- Start a work session by using pull to get any updates (aka "commits") that were pushed by a colleague (or by you on a different computer)
- Use add to tell Git that you have made changes that you want to record
- Use commit to record those changes and write a brief message explaining what you did
- Push your commit(s) to the remove version on Github.com
:::


## Git Basics

\

**Git can be complicated**

- Often used for sophisticated software development
- Branches, conflicts, merges, rebase
- Massive online community to guide new users

:::{.notes}
While the basic functionality of git is important for data analysis projects, it is important to note that it is often used by large teams developing very sophisticated software, and has many features aimed toward more complicated use. 
Luckily, there is a massive online community that can help guide new users through the process of using and learning
:::

## Creating a Github account

**Create an account for your organization

- Go to [github.com](https://github.com/)
- Click "Sign-up" (top right)
- Pick a username (ex. CloudburstGroup)
- Follow the instructions

:::{.notes}
Signing up for github is free, you just need to visit github.com and follow the instructions
Make sure to pick a username for your organization. This is like a social media handle that will allow others to find your data analysis projects online
:::


## Installing git

1. Open the terminal/command prompt
2. Check if you have git installed

```{.default}
git --version
```

:::{.fragment}
![](img/git_nope.png){fig-align="center"}
:::

:::{.notes}
Once you've signed-up for a Github account, you need to install git on your machine
- Begin by checking to see if you have git installed
- Open a terminal window (aka command prompt); you can search for "terminal" on Windows or Mac
- Type git --version into the prompt and hit Enter
- If you don't have it installed, you'll get an error that looks like this
:::

## Installing git

**If no, install git**

- Visit [gitforwindows.org](gitforwindows.org), click "Download", then double-click the `.exe` 

![](img/git_exe.png){width=2in fig-align="center"}

:::{.notes}
If you don't have Git installed, Mac will offer to install it for you. Just click Install
If you are on Windows, you will need to install yourself by visiting gitforwindows.org 
Click "Download", which will install an exe file on your harddrive. Double-click the exe file and follow the instructions
:::


## Installing git

![](img/git_exe_window.png){height=6in fig-align="center"}

:::{.notes}
Once you double-click the exe, a prompt will open. Proceed through the next few steps
:::


## Installing git

Optional: Override the default branch name (select 'main')

![](img/git_origin.png){fig-align="center"}

:::{.notes}
Although this is optional, most users are now opting to call the primary branch main rather than master
:::

## Installing git

Make sure that "Git from the command line and 3rd-party software" is selected

![](img/git_3p.png){fig-align="center"}


## Installing git

![](img/git_installed.png){fig-align="center"}

:::{.notes}

:::

## Connect your GitHub account

\

1. Open the terminal and enter the code below
2. Replace `"Your Name"`and `"yourname@email.edu"` with your name/email used to sign up for GitHub
3. Run the code

```{.default}
git config --global user.name "Your Name"
git config --global user.email "yourname@email.edu"
```

:::{.notes}

:::

## Connect your GitHub account

**Check that the confirmation worked**

```{.default}
git config --list
```

![](img/git_config.png){height=5in fig-align="center"}

:::{.notes}

:::


## Install a git client

1. Download [GitHub Desktop](https://desktop.github.com/) `.exe`
2. Double click the `.exe`

![](img/git_desktop_exe.png){height=3in fig-align="center"}
:::{.notes}

:::


## Install a git client

![](img/git_desktop_signin.png){height=6in fig-align="center"}

:::{.notes}

:::

## Clone your repo

![](img/git_desktop_clone.png){height=6in fig-align="center"}

## Clone your repo

![](img/git_desktop_clone2.png){fig-align="center"}

:::{.notes}

:::

## Clone your repo

![](img/git_desktop_repo.png){fig-align="center"}

:::{.notes}

:::

## Commit changes

![](img/git_desktop_commit.png){fig-align="center"}

:::{.notes}

:::


## Push to your repo


![](img/git_desktop_push.png){fig-align="center"}

:::{.notes}

:::

## Pull from your repo

![](img/git_desktop_pull.png){fig-align="center"}

:::{.notes}

:::


# Bonus Content: Quarto and Github Pages

## Installing Quarto

With newer versions of RStudio, Quarto comes pre-packaged in the installation files. To check whether you have Quarto on your computer, open RStudio, click on the "Terminal" tab in the bottom left window, type quarto check into the terminal, and hit ENTER. If you have a new enough version of RStudio, the terminal should return something like what you see in the first screenshot below.

**Check Installation Terminal**

![](img/terminal.png){fig-align="center"}

## Installing Quarto

If you DON'T have a new enough version of RStudio, you'll receive some error message. To fix this, all you should need to do is install the newest version of RStudio by going to the posit website and [installing RStudio](https://posit.co/download/rstudio-desktop/).

![Create a Quarto](create_file.png){fig-align="center"}


## Publishing a free website with Github pages

- Keep a repository of your website
- Push changes to your website via Github
- See changes almost instantly


## Create a website

**Moving to RStudio**

- File $\rightarrow$ New Project $\rightarrow$ New Directory $\rightarrow$ Quarto Website


![](img/website_initiate.png){height=4.5in fig-align="center"}

## Create a website

![](img/website_files.png){height=6in fig-align="center"}


## Create a website

**Change output director to `docs`**

![](img/website_docs.png){height=5.5in fig-align="center"}


## Publish to Github pages

![](img/pages_add.png){height=5.5in fig-align="center"}

## Publish to Github pages

![](img/pages_add2.png){height=5.5in fig-align="center"}


## Publish to Github pages

![](img/pages_add3.png){height=5.5in fig-align="center"}



## Publish to Github pages

![](img/pages_add4.png){height=5.5in fig-align="center"}



## Publish to Github pages

![](img/pages_publish.png){height=5.5in fig-align="center"}


## Publish to Github pages

![](img/pages_publish2.png){height=5.5in fig-align="center"}

## Host Your Final Project 

- Delete `_site` folder (now its using `docs`)
- Create `data` folder to store your dataset
- Add final project `.qmd` file to your repo (or drop it into `index.qmd`)
- Use `_quarto.yml` to add new pages to navigation bar 
- Render `index.qmd`; confirm that other pages have been rendered
- Push commit and check that the website updated



